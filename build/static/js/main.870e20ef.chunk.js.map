{"version":3,"sources":["serviceWorker.ts","components/RadioIcons.tsx","components/SearchBar.tsx","components/Results.tsx","utils/utils.ts","components/ListView.tsx","components/FlexItem.tsx","components/CardView.tsx","utils/themeUtils.ts","api/api.ts","components/SettingsView.tsx","App.tsx","ProviderWrapper.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","viewType","RadioIcons","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","event","items","wrap","_context","prev","next","setState","highlighted","value","onChange","state","stop","_x","_x2","apply","arguments","List","inherits","createClass","key","_this2","styles","border","box-shadow","react_default","createElement","className","id","Button","icon","iconOnly","onClick","e","Grid","React","Component","viewOption","SearchBar","handleRadioButtonChange","view","getViewOption","onViewChange","_viewOption","handleKeyPress","onSearch","query","bind","assertThisInitialized","target","RadioIcons_RadioIcons","Input","placeholder","Icon","name","color","primary","handleOnClick","backgroundColor","border-radius","input","handleOnChange","onKeyPress","launchTaskModule","card","content","type","taskInfo","height","undefined","width","title","preview","heroImageSrc","url","microsoftTeams","startTask","alert","concat","ListView","keyCount","outList","itemList","map","item","Flex","vAlign","Item","Image","src","Text","subTitle","selectable","FlexItem","react","tabIndex","onKeyDown","document","getElementById","focus","Layout","vertical","start","circular","Header","as","main","gap","CardView","tempSubTitle","tempTitle","i","length","newTitle","substring","newSubTitle","newItem","Box","push","themeTypes","Results","ListView_ListView","results","CardView_CardView","getResults","onResults","onError","jsonData","queriedItems","forEach","toLowerCase","includes","trim","data","SettingsView","handleNameChange","tabName","handleCommandChange","_ref2","_callee2","res","_context2","commandSelected","setValidityState","_x3","commands","registerOnSaveHandler","saveEvent","setSettings","entityId","contentUrl","suggestedDisplayName","notifySuccess","_this3","size","fluid","Dropdown","noResultsMessage","onSelectedChange","App","handleSearch","handleViewChange","response","onThemeChange","error","iUrl","href","queryString","frameContext","SettingsView_SettingsView","SearchBar_SearchBar","Results_Results","getThemeFromURL","themeString","theme","getTheme","newTheme","themes","teams","Contrast","teamsHighContrast","Dark","teamsDark","ProviderWrapper","handleThemeChange","currentTheme","themeUtils","Provider","src_App","ReactDOM","render","ProviderWrapper_ProviderWrapper","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.870e20ef.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: ( registration: ServiceWorkerRegistration ) => void;\r\n  onUpdate?: ( registration: ServiceWorkerRegistration ) => void;\r\n};\r\n\r\nexport function register( config?: Config ) {\r\n  if ( process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator ) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      ( process as { env: { [key: string]: string } } ).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if ( publicUrl.origin !== window.location.origin ) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener( 'load', () => {\r\n      const swUrl = `${ process.env.PUBLIC_URL }/service-worker.js`;\r\n\r\n      if ( isLocalhost ) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker( swUrl, config );\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then( () => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        } );\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW( swUrl, config );\r\n      }\r\n    } );\r\n  }\r\n}\r\n\r\nfunction registerValidSW( swUrl: string, config?: Config ) {\r\n  navigator.serviceWorker\r\n    .register( swUrl )\r\n    .then( registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if ( installingWorker == null ) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if ( installingWorker.state === 'installed' ) {\r\n            if ( navigator.serviceWorker.controller ) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if ( config && config.onUpdate ) {\r\n                config.onUpdate( registration );\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log( 'Content is cached for offline use.' );\r\n\r\n              // Execute callback\r\n              if ( config && config.onSuccess ) {\r\n                config.onSuccess( registration );\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    } )\r\n    .catch( error => {\r\n      console.error( 'Error during service worker registration:', error );\r\n    } );\r\n}\r\n\r\nfunction checkValidServiceWorker( swUrl: string, config?: Config ) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch( swUrl )\r\n    .then( response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get( 'content-type' );\r\n      if (\r\n        response.status === 404 ||\r\n        ( contentType != null && contentType.indexOf( 'javascript' ) === -1 )\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then( registration => {\r\n          registration.unregister().then( () => {\r\n            window.location.reload();\r\n          } );\r\n        } );\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW( swUrl, config );\r\n      }\r\n    } )\r\n    .catch( () => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    } );\r\n}\r\n\r\nexport function unregister() {\r\n  if ( 'serviceWorker' in navigator ) {\r\n    navigator.serviceWorker.ready.then( registration => {\r\n      registration.unregister();\r\n    } );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Button } from '@stardust-ui/react';\r\nimport '../css/SearchBar.css';\r\n\r\nenum viewType{\r\n    List= 'List',\r\n    Grid= 'Grid'\r\n}\r\n\r\ninterface IRadioIconsProps{\r\n    onChange: any\r\n}\r\n\r\ninterface IRadioIconsState {\r\n    highlighted: viewType\r\n}\r\n\r\nexport class RadioIcons extends React.Component<IRadioIconsProps, IRadioIconsState>{\r\n    constructor( props: IRadioIconsProps ){\r\n        super( props );\r\n        this.state = {\r\n            highlighted: viewType.List\r\n        }\r\n    }\r\n\r\n    // broadcast state\r\n    public handleChange = async ( event: any, items: any ) => {\r\n        await this.setState( { highlighted: items.value } )\r\n        this.props.onChange( this.state.highlighted );\r\n    }\r\n\r\n    public render(){\r\n        const styles = {\r\n            border: 'none',\r\n            'box-shadow':'none'\r\n        }\r\n        return (\r\n            <div className=\"SearchBar\" id=\"buttons\">\r\n                <Button icon=\"bullets\" iconOnly onClick={ e => this.handleChange( e, { value: viewType.List } ) } styles={ styles }/>\r\n                <Button icon=\"calendar\" iconOnly onClick={ e => this.handleChange( e, { value: viewType.Grid } ) } styles={ styles }/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\n","import React from 'react';\r\nimport { Input, Button, Icon } from '@stardust-ui/react';\r\nimport '../css/SearchBar.css'\r\nimport { RadioIcons } from './RadioIcons';\r\n\r\nenum viewType{\r\n  List= 'List',\r\n  Grid= 'Grid'\r\n}\r\n\r\ninterface ISearchBarProps{\r\n  onSearch: any\r\n  onViewChange: any\r\n}\r\n\r\ninterface ISearchBarState{\r\n  query: string,\r\n  viewOption: viewType\r\n}\r\n\r\n// searchbar class contains toggle, search, and search button\r\nexport class SearchBar extends React.Component<ISearchBarProps, ISearchBarState>{\r\n\r\n  // constructs search bar with given props\r\n  constructor( props: ISearchBarProps ){\r\n    super( props );\r\n    this.state = {\r\n      query: '',\r\n      viewOption: viewType.List,\r\n    };\r\n    this.getViewOption.bind( this );\r\n    this.handleRadioButtonChange.bind( this );\r\n    this.handleKeyPress.bind( this );\r\n  }\r\n\r\n  // handler for query changed -> updates state\r\n  public handleOnChange( event: any ): void {\r\n    this.setState( { query: event.target.value } );\r\n  }\r\n\r\n  // on search button click or 'return' pressed\r\n  public handleOnClick( event: any ): void{\r\n    this.props.onSearch( this.state.query );\r\n  }\r\n\r\n  // async to await the state change\r\n  handleRadioButtonChange = async ( view: string ) => {\r\n    await this.setState( { viewOption: this.getViewOption( view ) } );\r\n    this.props.onViewChange( this.state.viewOption );\r\n  }\r\n\r\n  getViewOption = ( view: string ): viewType => {\r\n    let _viewOption = viewType.List;\r\n    if( view === viewType.Grid ){\r\n      _viewOption = viewType.Grid;\r\n    }\r\n    return _viewOption;\r\n  }\r\n\r\n  // on enter search\r\n  handleKeyPress = ( event: any ) => {\r\n    if( event.key === 'Enter' ){\r\n      this.props.onSearch( this.state.query );\r\n    }\r\n  }\r\n\r\n  // renders search component\r\n  public render() {\r\n    return(\r\n        <div className=\"SearchBar\">\r\n            <RadioIcons onChange={ this.handleRadioButtonChange }/>\r\n            <Input\r\n                placeholder=\"Search...\"\r\n                icon={ () =>\r\n                    <Button\r\n                      iconOnly\r\n                      icon= { ()=> <Icon name=\"search\" styles={ { color: 'black' } }/> }\r\n                      primary onClick={ e => this.handleOnClick( e ) }\r\n                      styles={ { backgroundColor: 'none',\r\n                                border: 'none',\r\n                                'box-shadow': 'none',\r\n                                'border-radius': 'none'\r\n                                } }\r\n                      />\r\n                    }\r\n                input={ {\r\n                  styles: { backgroundColor: 'white' }\r\n                } }\r\n                onChange={ e => this.handleOnChange( e ) }\r\n                onKeyPress={ this.handleKeyPress }\r\n            />\r\n            <br/>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from 'react';\r\nimport { ListView } from './ListView'\r\nimport { CardView } from './CardView';\r\nimport { ICard } from '../api/api.interface';\r\n\r\nexport interface IResultState {\r\n  results: ICard[];\r\n  viewOption: string;\r\n}\r\nenum viewOption{\r\n  List = 'List',\r\n  Grid = 'Grid'\r\n}\r\nexport const Results = ( props: IResultState ) =>{\r\n  return (\r\n      <div>\r\n          {props.viewOption === viewOption.List ? <ListView itemList={ props.results } />\r\n          : <CardView itemList={ props.results } />}\r\n      </div>\r\n  )\r\n}\n","import * as microsoftTeams from '@microsoft/teams-js';\r\nimport { ICard } from '../api/api.interface';\r\nimport * as queryString from 'query-string';\r\n\r\nexport const launchTaskModule = ( card: ICard ) => {\r\n\r\n    // Only open task module if card is an Adaptive Card\r\n     if ( card.content.type && card.content.type === 'AdaptiveCard' ) {\r\n        const taskInfo: microsoftTeams.TaskInfo = {\r\n            height: undefined,\r\n            width: undefined,\r\n            title: card.preview.heroImageSrc,\r\n            url: undefined,\r\n            card: card.content\r\n           }\r\n        microsoftTeams.tasks.startTask( taskInfo );\r\n     }\r\n     else {\r\n         alert( `Could not load data, ${ card.content.type } is not supported.` )\r\n     }\r\n}\r\n\r\n// gets frame context from url\r\nexport const getFrameContext = ( iUrl: string ) => {\r\n    const url = queryString.parseUrl( iUrl );\r\n    return url.query.frameContext;\r\n}\r\n","import React from 'react'\r\nimport { List, Image, Flex, Text } from '@stardust-ui/react'\r\nimport { ICard } from '../api/api.interface';\r\nimport { launchTaskModule } from '../utils/utils';\r\n\r\nexport interface IItemListProps {\r\n    itemList: ICard[]\r\n}\r\n\r\nexport const ListView = ( props: IItemListProps ) => {\r\n\r\n    // Key count to ensure unique keys for every item\r\n    let keyCount = 0\r\n\r\n    // Function to translate items from IPreviewCard to List.Item format\r\n    const processItem = ( item: ICard ) => {\r\n        keyCount++\r\n        const out = {\r\n            key: keyCount,\r\n            content: (\r\n                <Flex vAlign='center'>\r\n                    <Flex.Item styles={ { width: '32px', height:'32px' } }>\r\n                        <Image src={ item.preview.heroImageSrc } className='listItemImage'/>\r\n                    </Flex.Item>\r\n                    <Flex.Item>\r\n                        <Text content={ item.preview.title } className='listItemTitle'/>\r\n                    </Flex.Item>\r\n                    {item.preview.subTitle ?\r\n                        <Flex.Item>\r\n                            <Text content={ item.preview.subTitle } className='listItemDescription'/>\r\n                        </Flex.Item>\r\n                        :null\r\n                    }\r\n                </Flex>\r\n            ),\r\n            className: 'listItem',\r\n            onClick: () => launchTaskModule( item )\r\n        }\r\n        return out;\r\n    }\r\n\r\n    // Output List for processed data\r\n    // Call processing function on all items\r\n    const outList = ( props.itemList ).map( processItem );\r\n\r\n    // Render selectable list\r\n    return (\r\n        <div>\r\n            <List selectable items = { outList }/>\r\n        </div>\r\n    )\r\n}\n","import * as React from 'react'\r\nimport { Image, Text, Header, Layout } from '@stardust-ui/react'\r\nimport { launchTaskModule } from '../utils/utils';\r\nimport { ICard } from '../api/api.interface';\r\n\r\nexport const FlexItem = ( props: ICard ) => {\r\n\r\n  const item = props.preview;\r\n\r\n  const keyDown = ( e: any ) => {\r\n    // Use Enter key to launch task module\r\n    if ( e.key === 'Enter' ) {\r\n      launchTaskModule( props );\r\n    }\r\n    // Use Escape key to exit Card View container and tab to Search Bar and toggle button\r\n    else if ( e.key === 'Escape' ) {\r\n      const element = document.getElementById( 'CardsContainer' )!;\r\n        element.focus();\r\n    }\r\n  }\r\n\r\nreturn (\r\n    <div tabIndex={ 0 } className=\"CardBox\" onClick= { () => launchTaskModule ( props ) } onKeyDown={ keyDown } >\r\n        <Layout vertical\r\n          start={\r\n              <div id=\"parent\">\r\n                  <Image className=\"heroImage\" src={ item.heroImageSrc } circular styles={ { width:'75px', height: '75px' } }/>\r\n                  <Header className=\"Title\" as=\"h4\" content={ item.title }/>\r\n              </div>\r\n          }\r\n          main={ <span className='Subtitle'><Text content={ item.subTitle }/></span> }\r\n          gap=\"2px\" />\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { Box } from '@stardust-ui/react';\r\nimport { FlexItem } from './FlexItem'\r\nimport '../css/CardView.css'\r\nimport { IItemListProps } from './ListView';\r\n\r\nexport const CardView = ( props: IItemListProps ) => {\r\n\r\n  const itemList = [];\r\n\r\n  let tempSubTitle: string|undefined;\r\n  let tempTitle: string;\r\n\r\n  const maxTitleLength = 21;\r\n  const maxSubtitleLength = 170;\r\n\r\n  for ( let i = 0; i < props.itemList.length; i++ ) {\r\n\r\n  const item = props.itemList[ i ];\r\n\r\n  tempSubTitle = item.preview.subTitle;\r\n  tempTitle = item.preview.title;\r\n\r\n  // Limiting title length to maintain consistent box sizes\r\n  if ( tempTitle.length > maxTitleLength ) {\r\n    const newTitle = tempTitle.substring( 0, maxTitleLength ).concat( '...' );\r\n    item.preview.title = newTitle;\r\n  }\r\n  // Also limiting subtitle length to maintain box sizes, if length of subtitle is greater than a certain value, make a substring and concat \"...\"\r\n  if ( tempSubTitle && ( tempSubTitle.length > maxSubtitleLength ) ) {\r\n    const newSubTitle = tempSubTitle.substring( 0, maxSubtitleLength ).concat( '...' );\r\n    item.preview.subTitle = newSubTitle;\r\n  }\r\n\r\n  // Pass new Item to FlexItem function to handle format of each box, then push each item to itemList array, a unique key is needed\r\n  const newItem = <Box key={ i } content={ FlexItem( item ) } />\r\n    itemList.push( newItem );\r\n  }\r\n\r\n  return (\r\n      <div className='CardsContainer' id='CardsContainer' tabIndex={ 1 }>\r\n          { itemList }\r\n      </div>\r\n  )\r\n}\r\n","import { themes, ThemeInput } from '@stardust-ui/react';\r\nimport * as queryString from 'query-string';\r\n\r\nenum themeTypes{\r\n    Dark='dark',\r\n    Default='default',\r\n    Contrast='contrast'\r\n};\r\n\r\n// gets theme name from url params\r\nexport const getThemeFromURL = ( iUrl: string ): string => {\r\n    const url = queryString.parseUrl( iUrl );\r\n\r\n    const themeString: any = url.query.theme;\r\n\r\n    if( !themeString ){\r\n        return 'default';\r\n    }\r\n    return themeString;\r\n}\r\n\r\n// gets theme type from string\r\nexport const getTheme = ( theme: string ): ThemeInput => {\r\n    const newTheme: ThemeInput = themes.teams;\r\n\r\n    switch( theme ){\r\n        case( themeTypes.Contrast ): return themes.teamsHighContrast;\r\n        case( themeTypes.Dark ): return themes.teamsDark;\r\n    }\r\n\r\n    return newTheme;\r\n}\r\n","import { default as jsonData } from './generated.json';\r\nimport { ICard, IPreviewCard, BotResponse } from '../api/api.interface';\r\nimport * as microsoftTeams from '@microsoft/teams-js'\r\n\r\nexport const getResults = ( query: string,\r\n    // should be microsoftTeams.bot.QueryResponse\r\n    onResults: ( response: BotResponse ) => void,\r\n    onError: ( error: string ) => {} ) => {\r\n    if( query === undefined ) {\r\n        return jsonData;\r\n    }\r\n\r\n    // TODO\r\n    // microsoftTeams.bot.sendQuery( { query } , onResults, onError );\r\n\r\n    // TODO REMOVE\r\n    const queriedItems: ICard[] = [];\r\n\r\n    jsonData.forEach( ( item: ICard ) => {\r\n        if( item && item.preview.title.toLowerCase().includes( query.trim().toLowerCase() ) ){\r\n            queriedItems.push( item );\r\n          }\r\n    } );\r\n    onResults( { data: queriedItems } );\r\n    // TODO REMOVE\r\n}\r\n","import * as React from 'react';\r\nimport { Text, Input, Dropdown } from '@stardust-ui/react';\r\nimport * as microsoftTeams from '@microsoft/teams-js';\r\n\r\ninterface IConfigTabState {\r\n    tabName: string;\r\n    commands: any;\r\n    commandSelected: any;\r\n}\r\n\r\n// config tab rendered when url has 'settings' as frameContext\r\nexport class SettingsView extends React.Component<{}, IConfigTabState> {\r\n\r\n    constructor( props: {} ){\r\n        super( props );\r\n        this.state = {\r\n            tabName: 'JSONTabDefault',\r\n            commands: [ 'queryCards', 'queryAdaptiveCards', 'queryHeroCards' ],\r\n            commandSelected: ''\r\n        }\r\n    }\r\n\r\n    public handleNameChange = async ( event: any ) => {\r\n        await this.setState( { tabName: event.target.value } );\r\n    }\r\n\r\n    public handleCommandChange = async ( event: any, res: any ) => {\r\n        await this.setState( { commandSelected: res.value } );\r\n        microsoftTeams.settings.setValidityState( true );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        microsoftTeams.initialize();\r\n        microsoftTeams.settings.registerOnSaveHandler( saveEvent => {\r\n            microsoftTeams.settings.setSettings( {\r\n                entityId: 'JSONTab',\r\n                contentUrl: `https://teams-json-tab.azurewebsites.net?theme={theme}&frameContext=content&commandId=${ this.state.commandSelected }`,\r\n                suggestedDisplayName: this.state.tabName,\r\n            } );\r\n            saveEvent.notifySuccess();\r\n        } );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Text size={ 'smaller' } content={ 'Name your tab' } />\r\n                <Input fluid placeholder=\"Tab name\" onChange={ e => this.handleNameChange( e ) } />\r\n                <br />\r\n                <Text size={ 'smaller' } content={ 'Select the command you\\'d like query your bot with' } />\r\n                <Dropdown\r\n                    fluid\r\n                    items={ this.state.commands }\r\n                    noResultsMessage=\"We couldn't find any matches.\"\r\n                    onSelectedChange={ this.handleCommandChange }\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default SettingsView;\r\n","import React from 'react';\r\nimport './css/App.css';\r\n\r\nimport { SearchBar } from './components/SearchBar';\r\nimport { Results } from './components/Results';\r\n\r\nimport { getResults } from './api/api';\r\n\r\nimport * as microsoftTeams from '@microsoft/teams-js';\r\nimport { ICard, BotResponse } from './api/api.interface';\r\nimport { getFrameContext } from './utils/utils';\r\nimport { SettingsView } from './components/SettingsView';\r\n\r\ninterface IAppState{\r\n  viewOption: string,\r\n  results: ICard[]\r\n}\r\n\r\ninterface IAppProps{\r\n  onThemeChange: any\r\n}\r\n\r\nclass App extends React.Component<IAppProps, IAppState>{\r\n\r\n  constructor( props: IAppProps ){\r\n    super( props );\r\n    this.state = {\r\n      viewOption: 'List',\r\n      results: []\r\n    }\r\n  }\r\n\r\n  // handles searchbar change\r\n  public handleSearch = ( query: string, viewOption: string ) => {\r\n    if( query !== undefined ){\r\n      getResults( query, this.onResults, this.onError )\r\n    }\r\n  }\r\n\r\n  // handles change of view\r\n  public handleViewChange = ( viewOption: string ) => {\r\n    if( viewOption ){\r\n      this.setState( { viewOption: viewOption } );\r\n    }\r\n  }\r\n\r\n  public componentDidMount() {\r\n    microsoftTeams.initialize();\r\n    microsoftTeams.registerOnThemeChangeHandler( this.props.onThemeChange );\r\n    getResults( '', this.onResults, this.onError );\r\n  }\r\n\r\n  public onError( error: string ): any {\r\n    alert( error );\r\n  }\r\n\r\n  // should be microsoftTeams.bot.QueryResponse\r\n  public onResults = ( response: BotResponse ): void => {\r\n    this.setState( { results: response.data } );\r\n  }\r\n\r\n  // calls api\r\n  render(){\r\n    const url: string = window.location.href\r\n    const frameContext = getFrameContext( url );\r\n\r\n    if( frameContext === 'settings' ) {\r\n      return (\r\n          <div>\r\n              <SettingsView  />\r\n          </div>\r\n      );\r\n    }\r\n\r\n    else {\r\n      return (\r\n          <div>\r\n              <SearchBar onSearch={ this.handleSearch } onViewChange={ this.handleViewChange }/>\r\n              <Results results={ this.state.results } viewOption={ this.state.viewOption } />\r\n          </div>\r\n    );\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport { Provider, ThemeInput } from '@stardust-ui/react';\r\nimport App from './App';\r\nimport * as themeUtils from './utils/themeUtils'\r\n\r\ninterface IProviderWrapperState{\r\n    currentTheme: ThemeInput\r\n}\r\n\r\n// wraps provider component so that theme can be held in state\r\nexport class ProviderWrapper extends React.Component<{}, IProviderWrapperState>{\r\n\r\n    constructor( props: {} ){\r\n        super( props );\r\n        // theme from params\r\n        const url: string = window.location.href;\r\n        const theme: string = themeUtils.getThemeFromURL( url );\r\n        this.state = {\r\n            currentTheme: themeUtils.getTheme( theme )\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <Provider theme={ this.state.currentTheme }>\r\n                <App onThemeChange={ this.handleThemeChange }/>\r\n            </Provider>\r\n        );\r\n    }\r\n\r\n    // handler for change in theme\r\n    public handleThemeChange = ( theme: string ) =>{\r\n        this.setState( { currentTheme: themeUtils.getTheme( theme ) } );\r\n    }\r\n\r\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { ProviderWrapper } from './ProviderWrapper';\r\n\r\nReactDOM.render( <ProviderWrapper />, document.getElementById( 'root' ) );\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}